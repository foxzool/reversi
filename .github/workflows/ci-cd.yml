name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run tests
      run: cargo test --verbose
      
    - name: Check formatting
      run: cargo fmt -- --check
      
    - name: Run clippy
      run: cargo clippy -- -D warnings

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            extension: .exe
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            extension: ''
          - os: macos-latest
            target: x86_64-apple-darwin
            extension: ''
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev libudev-dev
        
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build release
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Prepare build artifacts
      shell: bash
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/reversi${{ matrix.extension }} dist/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: reversi-${{ matrix.target }}
        path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Prepare itch.io package
      run: |
        mkdir -p itch-package
        
        # Windows build
        if [ -d "reversi-x86_64-pc-windows-msvc" ]; then
          mkdir -p itch-package/windows
          cp reversi-x86_64-pc-windows-msvc/reversi.exe itch-package/windows/
        fi
        
        # Linux build
        if [ -d "reversi-x86_64-unknown-linux-gnu" ]; then
          mkdir -p itch-package/linux
          cp reversi-x86_64-unknown-linux-gnu/reversi itch-package/linux/
          chmod +x itch-package/linux/reversi
        fi
        
        # macOS build
        if [ -d "reversi-x86_64-apple-darwin" ]; then
          mkdir -p itch-package/macos
          cp reversi-x86_64-apple-darwin/reversi itch-package/macos/
          chmod +x itch-package/macos/reversi
        fi
        
    - name: Install Butler (itch.io CLI)
      run: |
        curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
        unzip butler.zip
        chmod +x butler
        sudo mv butler /usr/local/bin/
        
    - name: Deploy to itch.io
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      run: |
        butler push itch-package/windows ${{ secrets.ITCH_USER }}/${{ secrets.ITCH_GAME }}:windows --userversion-file <(echo ${{ github.sha }})
        butler push itch-package/linux ${{ secrets.ITCH_USER }}/${{ secrets.ITCH_GAME }}:linux --userversion-file <(echo ${{ github.sha }})
        butler push itch-package/macos ${{ secrets.ITCH_USER }}/${{ secrets.ITCH_GAME }}:macos --userversion-file <(echo ${{ github.sha }})